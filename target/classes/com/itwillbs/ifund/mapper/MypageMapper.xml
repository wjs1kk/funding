<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.itwillbs.ifund.mapper.MypageMapper">
  
<!-- 0516수정 세션정보 가져오기 -->
	<select id="selectIdx" resultType="string">
		SELECT member_idx
			FROM member
				WHERE member_email = #{member_email}
	</select>
  	<select id="selectUser" resultType="com.itwillbs.ifund.vo.MemberVO">
		SELECT * 
			FROM member
				WHERE member_idx = #{member_idx} 
	</select>
  	<select id="selectMaker" resultType="com.itwillbs.ifund.vo.MakerVO">
		SELECT * 
			FROM maker
				WHERE member_idx = #{member_idx} 
	</select>
	<select id="selectPasswd" resultType="string">
		SELECT member_passwd
			FROM member
				WHERE member_idx = #{member_idx}
	</select>

<!-- 0516수정 패스워드 수정 -->
	<update id="updateUser">
		UPDATE member			
			SET member_passwd = #{member_passwd}
				,member_image = #{member_image}
				, member_image_path = #{member_image_path}
				, member_phone = #{member_phone}

				WHERE member_idx = #{member_idx}
	</update>


<!-- 	0518수정-포인트내역 -->
	<select id="selectPoint" resultType="com.itwillbs.ifund.vo.PointVO">
		SELECT * 
			FROM point
				WHERE member_idx = #{member_idx}
				ORDER BY point_idx desc
	</select>
	<insert id="joinPoint">
		INSERT INTO point(point_idx, member_idx, point_content, point_used, point_save, member_point)
			VALUES (
				null,
				(SELECT member_idx FROM member WHERE member_email = '${member_email}'),
				"가입",
				0,
				2000,
				2000
			)
	</insert>


	<delete id="deleteMember">
		DELETE
			FROM member
				WHERE member_idx = #{member_idx}
	</delete>

	
	<select id="selectWish" resultType="com.itwillbs.ifund.vo.ProjectListVO">
		SELECT p.project_idx, project_thumbnail, project_plan, project_target, project_end_date, project_title ,maker_name, project_detail_amount
		FROM project p
		inner join project_detail pd on p.project_idx = pd.project_idx
		inner join maker m on p.maker_idx = m.maker_idx 
		WHERE p.project_idx IN 
					(SELECT project_idx FROM wish WHERE member_idx = #{member_idx});
	</select>

	<update id="updateProfile">
		UPDATE member
			SET <if test="member_image != null and !member_image.equals('')">
					member_image = 
					, member_image_path = '파일경로'
				</if>
			WHERE
				member_idx = #{member_idx}
	</update>

  	<select id="selectCoupon" resultType="com.itwillbs.ifund.vo.CouponVO">
		SELECT * 
			FROM coupon
				WHERE coupon_isadmin = "1" 
	</select>
  	<select id="myCoupon" resultType="com.itwillbs.ifund.vo.CouponVO">
		SELECT * 
			FROM coupon
				WHERE coupon_idx 
					IN (SELECT coupon_idx FROM coupon_used WHERE member_idx = #{member_idx})
	</select>
	<insert id="insertCoupon">
		INSERT INTO coupon
        	(coupon_idx, coupon_name, coupon_code, coupon_start, 
        		coupon_end, coupon_percent, coupon_isadmin, maker_idx)
			VALUES (
				null,
				#{coupon_name},
				#{coupon_code},
				#{coupon_start},
				#{coupon_end},
				#{coupon_percent},
				0,
				#{maker_idx}
			)
	</insert>
	<insert id="downCoupon">
		INSERT INTO coupon_used(coupon_idx, member_idx, coupon_useable)
			VALUES( (SELECT coupon_idx
					 	FROM coupon
							 WHERE coupon_idx = #{coupon_idx}),
					(SELECT member_idx
						FROM member
							WHERE member_idx = #{member_idx}),
					'Y'
		)
	</insert>

	<select id="checkCoupon" resultType="Integer">
		SELECT coupon_idx
			FROM coupon_used
				WHERE coupon_idx = #{coupon_idx}
			 		  AND member_idx = #{member_idx}
	</select>
	
	
<!-- 	0613 김애리 추가 - 보유 쿠폰 갯수 -->
	<select id="countCoupon" resultType="Integer">
		SELECT count(coupon_idx)
			FROM coupon_used
				WHERE member_idx = #{member_idx}
	</select>
	
<!-- 	0613 김애리 추가 - 참여한 펀딩 갯수 -->
	<select id="countPayment" resultType="Integer">
		SELECT count(py.payment_idx)
			FROM payment py		
			INNER JOIN project p ON py.project_idx = p.project_idx
				WHERE py.member_idx = #{member_idx}
						AND p.project_type = "1"
	</select>
	
<!-- 		0615 김애리 추가 - 참여한 공동구매 갯수 -->
	<select id="countPreorder" resultType="Integer">
		SELECT count(py.payment_idx)
			FROM payment py		
			INNER JOIN project p ON py.project_idx = p.project_idx
				WHERE py.member_idx = #{member_idx}
						AND p.project_type = "2"
	</select>
	
<!-- 	0614 김애리 추가 - 생성한 프로젝트 갯수 -->
	<select id="countProject" resultType="Integer">
		SELECT count(project_idx)
			FROM project
				WHERE member_idx = #{member_idx}
	</select>

<!-- 	<select id="selectPayment" resultType="map"> -->
<!-- 		SELECT p.*, py.* -->
<!-- 			FROM payment py		 -->
<!-- 			INNER JOIN project p ON py.project_idx = p.project_idx -->
<!-- 				WHERE py.member_idx = #{member_idx} -->
<!-- 						AND p.project_type = "1" -->
<!-- 	</select> -->
	
	<select id="selectPayment" resultType="map">
		SELECT py.payment_idx, p.project_title, p.project_category, p.project_start_date, p.project_end_date
			FROM payment py		
			INNER JOIN project p ON py.project_idx = p.project_idx
				WHERE py.member_idx = #{member_idx}
					AND p.project_type = "1"
	</select>
	
	<select id="selectPaymentMap" resultType="map">
		SELECT p.*, py.*
			FROM payment py		
			INNER JOIN project p ON py.project_idx = p.project_idx
				WHERE py.member_idx = #{member_idx} 
						AND py.payment_idx = #{payment_idx}
	</select>
	
	<select id="selectPreorder" resultType="map">
		SELECT py.payment_idx, p.project_title, p.project_category, p.project_start_date, p.project_end_date
			FROM payment py		
			INNER JOIN project p ON py.project_idx = p.project_idx
				WHERE py.member_idx = #{member_idx}
					AND p.project_type = "2"
	</select>

	<update id="updateSmsAuth">
		UPDATE member
			SET sms_auth_status = 'Y'
			WHERE
				member_idx = #{member_idx}
	</update>
	
<!-- 	0609 김애리 추가 - 서포터 문의내역 -->
	<select id="selectInquiry" resultType="com.itwillbs.ifund.vo.InquiryVO">
		SELECT *
			FROM inquiry
				WHERE member_idx = #{member_idx}	
				ORDER BY inq_idx desc
	</select>
	<select id="getInquiry" resultType="com.itwillbs.ifund.vo.InquiryVO">
		SELECT *
			FROM inquiry
				WHERE inq_idx = #{inq_idx}
	</select>

	<select id="myInquiry" resultType="map">
		SELECT i.*, m.*
			FROM inquiry i
				INNER JOIN maker m ON i.maker_idx = m.maker_idx 
				WHERE i.member_idx = #{member_idx}
<!-- 					AND i.maker_idx = #{maker_idx} -->
				ORDER BY inq_re_ref DESC, inq_re_seq ASC
				LIMIT #{startRow}, #{listLimit};
	</select>
	
	<select id="myInquiryCount" resultType="Integer">
		SELECT COUNT(member_idx)
			FROM inquiry
				WHERE member_idx = #{member_idx}
	</select>
	
	
	<select id="SupInquiry" resultType="map">
		SELECT i.*, m.*
		FROM inquiry i
		INNER JOIN maker m ON i.maker_idx = m.maker_idx 
		WHERE i.maker_idx IN (SELECT maker_idx FROM maker WHERE member_idx = #{member_idx})
		ORDER BY inq_re_ref DESC, inq_re_seq ASC
		LIMIT #{startRow}, #{listLimit};

	</select>

	
	<select id="SupInquiryCount" resultType="Integer">
		SELECT COUNT(maker_idx)
			FROM inquiry
				WHERE maker_idx = #{maker_idx}
	</select>
	
	<update id="updateProgress">
		UPDATE inquiry SET inq_progress = "답변완료"
			WHERE inq_re_ref = #{inq_re_ref}
	</update>
	
		<!-- 1:1 문의 답변 기능 -->
	<insert id="insertReply">
	  	<selectKey keyProperty="inq_idx" resultType="int" order="BEFORE">
	  		SELECT IFNULL(MAX(inq_idx), 0) FROM inquiry
	  	</selectKey>
	  	INSERT INTO inquiry
	  	VALUES (#{inq_idx} + 1
	  			, #{member_idx}
	  			, #{maker_idx}
	  			, "답변"
	  			, CONCAT('Re : ', #{inq_subject})
	  			, #{inq_content}
	  			, #{inq_re_ref} 
	  			, #{inq_re_lev} + 1 
	  			, #{inq_re_seq} + 1
	  			, now()
	  		   )
	</insert>
  	<select id="selectMakerIdx" resultType="map">
		SELECT maker_idx
			FROM maker
				WHERE member_idx = #{member_idx} 
	</select>
  	<select id="selectMakerName" resultType="map">
		SELECT maker_name
			FROM maker
				WHERE maker_idx = #{maker}
	</select>
	
	
  </mapper>